#!/usr/bin/env python3
"""Django-style management commands for FastAPI"""
import click
import uvicorn
from alembic import command
from alembic.config import Config
import sys
import os
import asyncio

# –î–æ–±–∞–≤–∏—Ç—å app –≤ path
sys.path.insert(0, os.path.dirname(__file__))


@click.group()
def cli():
    """Medical Information System CLI"""
    pass


@cli.command()
@click.option('--host', default='0.0.0.0', help='Host to bind')
@click.option('--port', default=8000, help='Port to bind')
@click.option('--reload', is_flag=True, help='Enable auto-reload')
def runserver(host, port, reload):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
    click.echo(f"üöÄ Starting server on {host}:{port}")
    uvicorn.run(
        "app.main:app",
        host=host,
        port=port,
        reload=reload
    )


@cli.command()
@click.option('--message', '-m', default='auto migration', help='Migration message')
def makemigrations(message):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é"""
    click.echo("üìù Creating migration...")
    alembic_cfg = Config("alembic.ini")
    try:
        command.revision(alembic_cfg, autogenerate=True, message=message)
        click.echo(f"‚úÖ Migration '{message}' created")
    except Exception as e:
        click.echo(f"‚ùå Error: {e}", err=True)
        sys.exit(1)


@cli.command()
def migrate():
    """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏"""
    click.echo("üîÑ Applying migrations...")
    alembic_cfg = Config("alembic.ini")
    try:
        command.upgrade(alembic_cfg, "head")
        click.echo("‚úÖ Migrations applied successfully")
    except Exception as e:
        click.echo(f"‚ùå Error: {e}", err=True)
        sys.exit(1)


@cli.command()
@click.option('--steps', '-n', default=1, help='Number of migrations to rollback')
def rollback(steps):
    """–û—Ç–∫–∞—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏"""
    click.echo(f"‚è™ Rolling back {steps} migration(s)...")
    alembic_cfg = Config("alembic.ini")
    try:
        command.downgrade(alembic_cfg, f"-{steps}")
        click.echo(f"‚úÖ Rolled back {steps} migration(s)")
    except Exception as e:
        click.echo(f"‚ùå Error: {e}", err=True)
        sys.exit(1)


@cli.command()
def shell():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –æ–±–æ–ª–æ—á–∫—É"""
    import code
    from app.db.session import AsyncSessionLocal
    
    click.echo("üêç Medical System Async Shell")
    click.echo("Available objects:")
    click.echo("  - AsyncSessionLocal: Async session factory")
    click.echo("  - asyncio: Asyncio module")
    click.echo("\nExample usage:")
    click.echo("  async with AsyncSessionLocal() as db:")
    click.echo("      result = await db.execute(select(User))")
    click.echo("      users = result.scalars().all()")
    
    banner = """
üêç Medical System Async Shell
Available objects:
  - AsyncSessionLocal: Async session factory
  - asyncio: For running async code
"""
    
    code.interact(banner=banner, local={'AsyncSessionLocal': AsyncSessionLocal, 'asyncio': asyncio})


@cli.command()
def createsuperuser():
    """–°–æ–∑–¥–∞—Ç—å —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    click.echo("üë§ Create Superuser")
    
    username = click.prompt("Username")
    email = click.prompt("Email")
    full_name = click.prompt("Full name")
    password = click.prompt("Password", hide_input=True, confirmation_prompt=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º async —Ñ—É–Ω–∫—Ü–∏—é
    asyncio.run(_create_superuser_async(username, email, full_name, password))


async def _create_superuser_async(username: str, email: str, full_name: str, password: str):
    """Async —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from app.db.session import AsyncSessionLocal
    from app.core.security import get_password_hash
    from app.modules.auth.models import User
    from sqlalchemy import select
    
    async with AsyncSessionLocal() as db:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            result = await db.execute(select(User).filter(User.username == username))
            existing_user = result.scalar_one_or_none()
            
            if existing_user:
                click.echo(f"‚ùå User '{username}' already exists", err=True)
                sys.exit(1)
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(
                username=username,
                email=email,
                full_name=full_name,
                hashed_password=get_password_hash(password),
                role="admin",
                is_active="Y"
            )
            
            db.add(user)
            await db.commit()
            await db.refresh(user)
            
            click.echo(f"‚úÖ Superuser '{username}' created successfully!")
            click.echo(f"   ID: {user.id}")
            click.echo(f"   Email: {user.email}")
            click.echo(f"   Role: {user.role}")
        
        except Exception as e:
            await db.rollback()
            click.echo(f"‚ùå Error: {e}", err=True)
            import traceback
            traceback.print_exc()
            sys.exit(1)


@cli.command()
def test():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã"""
    import pytest
    
    click.echo("üß™ Running tests...")
    exit_code = pytest.main(["-v", "--cov=app", "tests/"])
    sys.exit(exit_code)


@cli.command()
def initdb():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç Alembic –º–∏–≥—Ä–∞—Ü–∏–∏)"""
    click.echo("üóÑÔ∏è  Initializing database with migrations...")
    
    try:
        # –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏
        alembic_cfg = Config("alembic.ini")
        command.upgrade(alembic_cfg, "head")
        click.echo("‚úÖ Database initialized successfully")
    except Exception as e:
        click.echo(f"‚ùå Error: {e}", err=True)
        import traceback
        traceback.print_exc()
        sys.exit(1)


@cli.command()
@click.option('--limit', default=10, help='Number of users to show')
def listusers(limit):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    asyncio.run(_list_users_async(limit))


async def _list_users_async(limit: int):
    """Async —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    from app.db.session import AsyncSessionLocal
    from app.modules.auth.models import User
    from sqlalchemy import select
    
    click.echo(f"üë• Listing users (limit: {limit})...")
    
    async with AsyncSessionLocal() as db:
        try:
            result = await db.execute(select(User).limit(limit))
            users = result.scalars().all()
            
            if not users:
                click.echo("No users found")
                return
            
            click.echo("\n" + "="*80)
            click.echo(f"{'ID':<5} {'Username':<15} {'Email':<30} {'Role':<15} {'Active':<8}")
            click.echo("="*80)
            
            for user in users:
                active = "‚úì" if user.is_active == "Y" else "‚úó"
                click.echo(f"{user.id:<5} {user.username:<15} {user.email:<30} {user.role:<15} {active:<8}")
            
            click.echo("="*80)
            click.echo(f"\nTotal: {len(users)} user(s)")
            
        except Exception as e:
            click.echo(f"‚ùå Error: {e}", err=True)
            import traceback
            traceback.print_exc()
            sys.exit(1)


@cli.command()
@click.argument('username')
def deleteuser(username):
    """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username"""
    if not click.confirm(f"Are you sure you want to delete user '{username}'?"):
        click.echo("Cancelled.")
        return
    
    asyncio.run(_delete_user_async(username))


async def _delete_user_async(username: str):
    """Async —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from app.db.session import AsyncSessionLocal
    from app.modules.auth.models import User
    from sqlalchemy import select
    
    async with AsyncSessionLocal() as db:
        try:
            result = await db.execute(select(User).filter(User.username == username))
            user = result.scalar_one_or_none()
            
            if not user:
                click.echo(f"‚ùå User '{username}' not found", err=True)
                sys.exit(1)
            
            await db.delete(user)
            await db.commit()
            
            click.echo(f"‚úÖ User '{username}' deleted successfully!")
            
        except Exception as e:
            await db.rollback()
            click.echo(f"‚ùå Error: {e}", err=True)
            import traceback
            traceback.print_exc()
            sys.exit(1)


@cli.command()
def dbstats():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    asyncio.run(_show_db_stats_async())


async def _show_db_stats_async():
    """Async —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î"""
    from app.db.session import AsyncSessionLocal
    from app.modules.auth.models import User
    from app.modules.patients.models import Patient
    from app.modules.appointments.models import Appointment
    from app.modules.visits.models import Visit
    from app.modules.prescriptions.models import Prescription
    from sqlalchemy import select, func
    
    click.echo("üìä Database Statistics")
    click.echo("="*50)
    
    async with AsyncSessionLocal() as db:
        try:
            # –°—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            result = await db.execute(select(func.count(User.id)))
            users_count = result.scalar()
            
            # –°—á–∏—Ç–∞–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
            result = await db.execute(select(func.count(Patient.id)))
            patients_count = result.scalar()
            
            # –°—á–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å–∏
            result = await db.execute(select(func.count(Appointment.id)))
            appointments_count = result.scalar()
            
            # –°—á–∏—Ç–∞–µ–º –≤–∏–∑–∏—Ç—ã
            result = await db.execute(select(func.count(Visit.id)))
            visits_count = result.scalar()
            
            # –°—á–∏—Ç–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã
            result = await db.execute(select(func.count(Prescription.id)))
            prescriptions_count = result.scalar()
            
            click.echo(f"üë• Users:         {users_count}")
            click.echo(f"üè• Patients:      {patients_count}")
            click.echo(f"üìÖ Appointments:  {appointments_count}")
            click.echo(f"ü©∫ Visits:        {visits_count}")
            click.echo(f"üíä Prescriptions: {prescriptions_count}")
            click.echo("="*50)
            
        except Exception as e:
            click.echo(f"‚ùå Error: {e}", err=True)
            import traceback
            traceback.print_exc()
            sys.exit(1)


if __name__ == "__main__":
    cli()